{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Coordinate Clustering Module\n",
    "\n",
    "On top of support for different clustering algorithms, sensAI provides useful methods specific to\n",
    "clustering of geospatial data. They include utilities for wrangling geometrical data, spanning trees and for persisting and\n",
    "visualizing the results. It seamlessly interoperates with geopandas and shapely.\n",
    "This notebook gives an overview of the coordinate clustering's main functions\n",
    "\n",
    "\n",
    "## Before running the notebook\n",
    "\n",
    "Install the library and its dependencies with, if you haven't done so already\n",
    "```\n",
    "pip install -e .\n",
    "```\n",
    "from the root directory. You can also execute this command directly in the notebook but will need to reload the\n",
    "kernel afterwards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note - this cell should be executed only once per session\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import sys, os\n",
    "\n",
    "# in order to get the config, it is not part of the library\n",
    "os.chdir(\"..\")\n",
    "sys.path.append(os.path.abspath(\".\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:config.__Configuration:Reading configuration from /home/runner/work/sensAI/sensAI/config.json\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import geopandas as gp\n",
    "from pprint import pprint\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.cluster import DBSCAN\n",
    "\n",
    "import logging\n",
    "from sensai.util.graph import CoordinateSpanningTree\n",
    "from sensai.clustering.coordinate_clustering import SKLearnCoordinateClustering\n",
    "from sensai.util.geometry import alphaShape\n",
    "from config import get_config\n",
    "\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "c = get_config(reload=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading and Fitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The library contains utils for loading coordinates from files and for wrapping arbitrary scikit-learn compatible\n",
    "clustering algorithms. Custom clustering algorithms can be implemented easily buy inheriting from the baseclass\n",
    "`ClusteringModel`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Fitting SKLearnCoordinateClustering to 78782 coordinate datapoints.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:SKLearnCoordinateClustering found 477 clusters\n"
     ]
    }
   ],
   "source": [
    "sampleFile = c.datafile_path(\"sample\", stage=c.RAW) # this can point to a directory or a shp/geojson file\n",
    "sampleGeoDF = gp.read_file(sampleFile)\n",
    "dbscan = SKLearnCoordinateClustering(DBSCAN(eps=150, min_samples=20))\n",
    "dbscan.fit(sampleGeoDF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulting `CoordinateClusteringAlgorithm` instance has many useful methods.\n",
    "You can retrieve clusters individually or via a generator. The noise cluster can be accessed individually"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 0% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 5% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 10% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 15% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 20% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 25% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 30% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 35% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 40% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 45% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 50% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 55% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 60% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 65% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 70% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 75% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 80% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 85% of clusters\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clusters found: 477\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 90% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 95% of clusters\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clusters with at least 50 members: 154\n"
     ]
    }
   ],
   "source": [
    "print(f\"Clusters found: {dbscan.numClusters}\")\n",
    "\n",
    "clustersMin50 = list(dbscan.clusters(condition=lambda x: len(x) >= 50))\n",
    "\n",
    "print(f\"Clusters with at least 50 members: {len(clustersMin50)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis and Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the dbscan single clusters which are instances of `CoordinateClusteringAlgorithm.Cluster` \n",
    "can be retrieved and visualized. Most objects, including the dbscan itself, have an inbuilt plot method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 0% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 5% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 10% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 15% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 20% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 25% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 30% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 35% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 40% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 45% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 50% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 55% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 60% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 65% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 70% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 75% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 80% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 85% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 90% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 95% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.util.tracking:Finished execution of toGeoDF in 16.06s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dbscan.plot(markersize=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can condition before plotting as well as pass custom arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 0% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 5% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 10% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 15% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 20% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 25% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 30% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 35% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 40% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 45% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 50% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 55% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 60% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 65% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 70% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 75% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 80% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 85% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 90% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 95% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.util.tracking:Finished execution of toGeoDF in 4.73s\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXEAAAEQCAYAAABGL0RbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAABpaklEQVR4nO2dd5xTRdeAn3OTbK/A0ntvUqQpKoKgiCAi9t6w947d166f9bUhL2IXsaAiKBYEsSKg9K60pfftu0nufH8kW7Kpu5vsbnbn4Zcfycy5957JJidzz5w5R5RSaDQajSY6MWpaAY1Go9FUHm3ENRqNJorRRlyj0WiiGG3ENRqNJorRRlyj0WiiGG3ENRqNJoqJOiMuIlNFZI+IrAxR/mwRWS0iq0Tkw0jrp9FoNNWJRFucuIgMAXKAd5VSPYPIdgI+Bk5QSh0UkcZKqT3VoadGo9FUB1E3E1dKLQAOlG0TkQ4iMkdElojIzyLS1d11JfCqUuqg+1htwDUaTZ0i6oy4HyYDNyql+gF3AK+52zsDnUXkVxH5Q0ROrjENNRqNJgJYa1qBqiIiScBg4BMRKW6Odf9vBToBQ4GWwAIROUIpdaia1dRoNJqIEPVGHNfdxCGlVB8ffZnAQqWUHdgkIutxGfVF1aifRqPRRIyod6copbJwGeizAMRFb3f3F7hm4YhII1zulX9rQE2NRqOJCFFnxEVkGvA70EVEMkXkCuAC4AoRWQasAk5zi38L7BeR1cA84E6l1P6a0Fuj0WgiQdSFGGo0Go2mlKibiWs0Go2mlKha2GzUqJFq27ZtTauh0Wg01cqSJUv2KaUyfPVFlRFv27Ytixcvrmk1NBqNploRkS3++rQ7RaPRaKIYbcQ1Go0mitFGXKPRaKIYbcQ1Go0mitFGXBNRlCMPtecHVOY0VM6GmlZHo6kWzP3zMP+5FzNnfcSvFVXRKZroQJkO2PoObH4DVK5nH8DRc5G4pjWim0YTKko5KTj0CBR8VNpo7U18xsd+jzE3T4G9/1facOAzTIAjV2BYYiKipzbiPjDtTnZ8t4bcrQdpe34/YlMTalqlqEFlrYAl5wYW+n04CpBhq6pFJ42moiilKNg1CMj27HAsI39nX+Kb/e11jPnvE7D/Hd8n/KsXDFgbfkWp50Z8z8qD/PrkKg5tzaHDSc0YcHUHfjr5dQ+ZTf/7g5jGSZww59oa0jLKCGbAy6Dm9YDjlyOGJYIKaTQVpyh3Hl4GvIQ8ivK+JybhxJIW0zT9G3AAFEopyqTLDhv11ic+/6FlvNlvDms/3cauPw/y62OrmDfydXxlkinak8OiGz6pdh2jDXVwScUP+u3E4DIaTTVjZgeetDkPl7pMHFkHyHnjJIKloVJmQThU86JezsRzduXz+1OrPdqaZhxEAH+/k/t/2xxptSKOUopXJ/zG/A/+xWmH1IwYLnm2P8Mu7BCeC+z9ruLH2HeH59oaTbWyo+RZ9jMTiO29N/ghZgFY4sOuSb2ciX9x0S9ebRkN8wh2p+PIL4qQRpFnxz9ZjLe+z9y3XQYc4PDeIv57yW+cnfSB63awqsS1qvo5NJpoQNoBkP3TDNcMXIK7BMWaEhFV6qUR3/bLPq82SwjvhP1wZG6HqoPru37pt8+eb3KG7QP2Z+b6lQmJZmOrdnwYUM4ilD0bnWJZUyWSA7tPYzM+ZN4Vc9j13lcAFK7xH21V/EmUEAx9ZQjqThGRqcAYYI9SqqeP/guAu3F5IrKBa5VSy9x9JwMvARZgilLqKXf728DxwGH3aS5VSi2t6mBCppKTzrjGyeHVo5rY+U9WSGO+sddMPjxwXqWvI7YUVEwbKPKbq8ebjv+p9PXM/L3w/VjA94+rAkjrgxw3NSILSpq6S3xSL/L9rWvSiC1f72b7D9tI6J1OwyaHoTAO0w6GDY87+pK5RN+FEdM1lJn420CgKvGbgOOVUkcAj+KqPI+4fnZeBUYB3YHzRKR7mePuVEr1cT+WVkL3sKIUgRcmDEGM6DQEmWsOBxcC8g872LutirPxwbPB1ixE4QSk1ZmVuoxZlA3fn4Q/A17CoaWob46v1DU09Zv4ZuvAUm6BM+4Z4pv9yq83zANgw/IuJV0533THkV1qS5QC0wmFWfdh2NIipmfQmbhSaoGItA3Q/1uZl3/gqioPMBDYqJT6F0BEPsJVNs1zRbGWkLkzmVbN/f700veZmncVVJbYBFvIsst+2MGIyzpV+loiAsf+gCrYB5lvQ0wGNDgWll0LRdtLBRsMhZ7PV/o6zBkVuqwjG3PXLxhNj6389TT1kvjGtwC3eLQteeKP0hfKwDTBMFyf/bx5PbzOkfLQuSinHbGE/j2sCOGOTrkC+Mb9vAWwrUxfJjCozOvHReRBYC4wUSlV6OuEInIVcBVA69atw6NlDFBujXL/oVSSEwtIS7WXubbr/z7PjaPJsMobtprGUeQMWTZcdxsS1wg63lHacMx3qCJXeVOJaRiGK1TwjmHda1CHjXjOzOdg9Y+lDWIQd8VrWBvpxeZws2byCo/X3047gZPPL33vRdx39YaTxA5ZqGlDKfkGdrsA64Drw6pP2BY2RWQYLiN+dwji9wBdgQFAg0DHKKUmK6X6K6X6Z2T4LGxRYc6aPsRn++btTVi6ujnbdqSSNqIXJ/x4Ayf/dSdNo9iAA3Qe1Chk2a5Hhec99oXENAyTAa8Epv8fsoJcO189toK3rljI8tnbo2pR1H5wBzlPjfY04ADKpGDKNTj2ba0ZxeooymlSdjPJ1j1xrMtsxEvPnM3mfxNdMgoUJkkd9mIxys1N13yA44srwqpTWGbiItILmAKMKlNNfjtQdhrQ0t2GUmqnu61QRN4CykzZIk/HU1ow+L7u/Pa4L8+OQZYzjaP/b2R1qlQpcnfn8eeTy8jdmUPv63vQakhzn3JJ6bEkNLCQdyDwjDw+2UKLLqmRUDUoXzy9jE/vXQUCfUY34+qpR5PcMC58F2jt7Q47uD2Pd67+k5Wzd5W0/Tp1EwDP7T6N1Mbhj+kNJ87s/RS+cWVAmYIp15E0cVY1aVR3KTyYyx/nT8W+Lw9IRylhw45EXPNg193r5x+PIccEheLKuz4lxd9NbdYaHPvWY23UOSy6hVTt3u0Tn+UnOqU18CNwcVn/uIhYgfXAcFzGexFwvlJqlYg0U0rtFFfIwAtAgVJqYjA9+vfvr8JZnk0pxc9PLOf3p9dgFiowoPcl7Thl0lFhu0YkKMopYkqHj8BersOAq7ZfgDXWO5TpwM48rmj5md9zGlb4OO8CLKHEWoYJpRQXWab57X9+46k0bu87Isj86hhQeSFeyUBG/YTYkkpaVn67kxdP/ingUVNU6CkEaoKcT/4D//wZVC5p4uxq0CYyHP5nP6tf+JO4JokcccdRWOMjk0QqGD8MerokwmvfgSRWb0nDFXRXaqmzysyRnnrzJaxBpsjWi38LLFAGEVmilOrv8zwhHDwNGAo0EpFM4CHABqCUmgQ8CDQEXnOHcTnc7g+HiNwAfItrtFOVUsUZjz4QkQxc78BS4JqQRxNGRIQh9/VmyH29a+LylcLpcDKl9Ue+O02Y3PwDrtt/sVdXg2YJfFp0AR8+8De/fLyFvKxCHEWKxJRYLn6mL0PObR9hzT35z9Cv2bDgUECZib1mMzXHjyEdNQ++HuS7zwMbnDTHw4Bn/r6LF0+ej//9uS7WLthD1yGNQ7hGDbF5WU1rEDGUUnzW7TUoYxj/eXcF8Z1TGD37omrVZevHSzxCdHOLhPIGPD/0ZaewE0p0SsDAYaXUBGCCn76vga99tJ8QqoIaT+bf8ntgAQXbf9tFi8Hemw8sFoOLnujHRU/0i5B2ofH6ZQuCGnCAojzTb9IgwxoTQui7DWOs50w1/0A+007+nlA8iW+c8wsv7BwfVK7GiEuGXJ/xAFHPrBPe8TDgxeSvz+LTTq9yys+XkNA0yVsgAmyfudzz9Z5kyk8Ayt8UOxxgsRB0F3g4qJc7Nv2xc/VhXjhhLrenf8YLJ/zIvk05Na2SF+um/xtU5s8nl4Z8vt1ffMGWCRO8HtsffbQKWvpHKcWv72SGLG86A7j7jp4c+OBR872aPh4+K+QvVvau2p1mIXbMrcGFUmrxnUQACoPsHv76uHdwFjiqRRf74XyP1xLCuveU58ZESBtvtBEH8rOLuD5uOo/2mMOGefvIP+Rgw7y9PNh+Nj9NinxljgoRwm1bQqPAC4LKNNny8MNsmTCBglm+F70cW7awZcKEsEdq/D07dAMOYLH6/4gaGQOgy3XeHTGNMMb+jWHzzgOfty2fBEv0RJ8EwtauDzTrHlAm/vR7q0eZGuDvxxdUy3VsyZ7fpzbND4PPfKelbF7fAdP03kBY8vq8eWHTr94bcdNpcnvK5/iOUofp1/5Nfnb5m6WaI61X8CQ6x7/of2FWKcXWa6+FzNCM6b4PPghZt1D46snQ93q16BE8zYHR5UqcI98k77hY8o4rIu+4DJzD3wt4jAg0NBwE+yImZdTMIlpFSLrk/4iZ8AbuZapSEtKIO/dxLM2iOzw2EJs/iUyRhfI0P8UznqNZo1yE4s9P8WfI+7N09+U3kZfjuYNTKTg4cDZWW2zY9KuXqWjL8t3/rQkq8/aFv3Htl7Vj6/bIyccz/aiv/PYnt0kgLtX/TPzw7Nng9J7OH8izsWJ7Mv/uT6R1ej7DOu3DMCBv/ny48MJwqA6ANS70JEAP/xY8zDPn4FBgV5mWrRTmDKXI+h8Sk8/xe1zbdMX+/Sal8xhvH8s5zx8Zsq41SUyjlsRM/KKm1Qgv8QL5wRJ0V88dVesLBrDhpdKZswgc13c7G7alsHNfGgAJCN6xUsJDN9zs1XrjL3bCuRuj3s/Ef52yKahM2TjimqZh53RiMvxs37XCRX8HzkVyeO5cj9emgse+7ci1n/Thtd86MGddUyb/0Y7z3hvACz+1C5faJZzzZPBIoNa9U3l193jikwPPhHOz7sLTgJeiHA+hlLfPtNdNpdui+zV0kk6xjKLszKrHyU046oI2QXXVRIbxfwUPWGvQp0k1aOKKYjv+h5vKTXkVxw5ZyrW3zOD297bwmGM8T+WcHtL5mvVIC6t+9d6Ih3LLrGowfMgXV6w5lybldlY2OSqDa3eFEHpl93QNvbOwBSt2pUNJSYzSxx+bG/HFivAWNO44MIMeI3x/+bqdlMH75vk88fdoUjOCb/RRzpkB+3NzvMtlDX7Ac3bdvqGiX0M7beIdxBomzVrG8PSWMdz6zTCd+TDM2PMKmTt6CrN7P8/s3s8z55hXOLzWd1EQw2pw7PuB8xUdO+XUSKjpgTJNzIJCrClxjPj9bvq+cS4dBi2l/+jfadV9FwnJRbD+N7IfOxPWzONFdQ6qzD8vLJCQFl43XUibfWoL4d7sA7BrQxaPdP4moIw1Tvhv/tlhvW44MB0m9lwHMcm2kHOe7H3/fZeLxM057/Qn0G+5YSh+K7y6ipp6s+yb7Xx0z9/k7C9i0DltOOeJPthiKpZvOedg1yASsSSlL8PMyyLnzbvhoCsB18HEAXz9pPcse8TkY+k0vnrj5esTs3v7TnjW5/kxtBjue/fi/lW7mTfuU89Gq3DS7HNIaR+5FA7KNFl1/kQo8ryba3V5Z1ji314synia927428NFbgCJCFaE638cSqdhFb+DCLTZp94bcYDrZHrA/lOfOIJR9wSOAogWlGmy9aqrSl6f884Agm16+cPukldKsW3BDla+tR5rrJVB9/UhtXXN5VgPbsQhLv4v8p7xvWHowFGvsvLtdbQa0pyeV3TFYqv3N6YRw58BL6bnQ8NpMz6wq005TZDqSQm9cvxt3o3ipOURm/2GqC5f25Qp04/H3/fpxumD6X9W5Vx0gYy4/tQCt/0WeO9RXTHgAGIYZNwdSo4yT765dB6vNXifr8b9yKYvM9nw8Wbe7/0Fb3b6ODyl3SpFsAx9Fr8GHKDBygcY8+EIel/TXRvwCFK4P3jGyZX/mRtURixGtRhwR16+z/aM9tt9thczZfrggP0f3ROZHbb6kwt0PDqDC6d6/8iJFZ7LrsU79ipJQqdOtJo0iZh+wWfhvQZnMOuCufz7pe+QxIJ9hXw2ak4EtAxOYlrgnCDmriDZ4nIOoJy1J3y0rrJt5qrgQkDutoMR1iQ0Mv/3hc/22ES7z1m46RSchRZcYZ7+v097/61iwRU/1PsQw2IGX9aBwZd1YNOfe9mxIosjz2pJfEr4YjlrG4bVSrNrr8Z6+2QcAezYK1+P4X8t/eRqcbPnz/0B+yOFSAwwHpjhW+CT+UHP4cw6gDW9eqIc6isWW2hrHfm7sklslR7yeeeeP5O9f7irztuEY18dScsRbSuhoSf2fd41eP3htBtg1uxcWM/Ey9FuYAbHXNGhThvwskx83X/8+wfLzmDezaFnWqsJktKfAKN8LG4ycbE/h3YCu+9b52gg+2Ahpya8zSir5+P8ltPIOlB7xtX67NASzDXo0yLkc37UZVKpAQewK365ag6bv676DuuGI4/x2W4vEI/QdNPEbcCLI7qCh7FVpEBLqGgjXs8Zc0kXHph6PHGJpbOldj1T+bVgAu26prPxs9pfVCAp9VqS0teWeSyC3CC1N91IanTmFikqdHJ2xjQcPtK7HNxVyDmNp/PClSH+kEUYS4yVhscErsply0jACHHGvmbqMu+MU27+uOFH7LlVy3mTfkxfn+37N3vm61cmKFXqPhk3fCnBdgEblvD79LURjyIcjm1k5R5LVm6XMo8xOAL5Q0Jg9EVdmH/oCv6wX8Uf9quY9vc5WCwGi55dHvzgWorR0HeBjPJYYr3zq0QDX/x3RVCZ7976pwYXnT056rUzaX/lQJ99MRkJnPRD6Nmolz0WOJPnrBM+rJBu5RER2j3lurs7mGdjxrLmPPlDZ16Z15XsMmV4p8z2DHg4pu82wH86h9gkC0YE8vVrn3iUUGT/moIiX1nrNpBX2JMkYw2G4f8DopQT9syFPT9AXAtofQESG7hs27Z5OwP212YMwwJN28Eu/ztyjTMqHqVTW/jg0aUhyb10zW/cOrl21BbtdsOxdLvBpUvu1oPYs4tI7dY47BEnhXtDuwsLRGLnNjR48kHu7DGDYnfJgbxYrntlLBOvWUqXlG0s2diaK0ZuKDnGajV5+Prv+L83jya3oKxvXzAswnObIlNsXRvxKKG8Ac/ZmchHZ5zHgZUtcX3IPgaExKaxXPHDMBp3Ky2zpswimHcMqDJ+0i3/Q7W6DOlyu99rthvZkt1/BF/k6Xx224oNpppImvACOY+fCT6232ONJamHb99nNBCTaKEoL7h/dec/WdWgTcVJbB36AmZN8cwVC/B0VggOp4XHXu0HuHLyF9ihbLGh1OQCHrtlHk4TfvqzPf8e7MDw/5xCv7GRK1gd0txeRKaKyB4RWemn/wIRWS4iK0TkNxHpXabvZBFZJyIbRWRimfZ2IrLQ3T5dXKEGGh84nRs9Xi/879G81uUuDqxsRWlIk+v/3F2F/LfnHDKXlIkY+fFoTwNezLa3UEv956TuflFoGfBOfOO4kOSqG8MwSHlgBjTt4NmR1oSkOwNnOqztPP3dqJDkbp0avT9U/khsWT0bzNb9ccC7UUG8MrC50+xM/vpIn3m4DIFhR/3LXX9fHVEDDqH7xN8GTg7Qvwk4Xil1BPAoMBlARCzAq8AooDtwnogUO5KeBl5QSnUEDgLhLQFdhzDN0vjZvP3x/HT/yXjnOvFk6nBX1jV1YCEQoPrLvu9R+b7zV8SHUKh41AdDgsrUNClXvUDSfZ+RePVLJN31ISk3/Q/DFsYizDVA+yMCu8IAbLFCszY1U/g6kgx4MnBGUYmLzFKfRQkJWBAEG65F2D/XNef9H7vhND3TzWblQM65r0ZEj/KE5E5RSi1wF0v21182Du0PXJXtAQYCG5VS/wKIyEfAaSKyBjgBON8t9w7wMPB6RZSvL1gspZn3loRYxLko232r/Zd3Kkwv1j8DvZ/DdBaBfS8S0wgxYjHtWVjiC3Hmx+Drh8KSaND+lOjI9GdYbNAk/FkZa5KZeRcxNsH3HUXr7im8sbzubVQDaDK4Be3O7sKmj9f57B8166zwX1RBLAbi43swZ3EH5q9oQ4emB7FaTf7ZkU6+I5ZZL1fP/oNI+MSvAIozxLQAtpXpywQG4SqsfEiV5grNdMt6ISJXAVcBtG4dOEyprmIYpREUjoKK/smCl5hT2WtQPx8LuG4fy6a6v+CNON69+JaSlv5n/ESPE1aReyiRjIu9swRqqg9bjIVvHJeycek+Zjy/ilZdUzjvXt/hcXUJEWHQU8Noc1pnfr76a5w5rgmLJc3G0MmnkNI+/P72GB9Oi0Ss5LpTGRcUWlm1tTSz6PM/h+buCgdhNeIiMgyXEQ/bcrhSajJu90z//v2jJ1tXGMjLKuKtCQvZsTaLs587jXaDv6TvhD9Z9FLwt9cSV9ZXHiy5/ma/XYlpBVzx0bP8POkETrhifkl7QmoB/DQGM+N4jIEvBdUnEpg5+yj67mnY9w+ktcB6ykNYk4K7GeoaHfs04q53a0fRkuqk6dEtOGv5lZh2J6bdxJrgJ89+Jek2OJU1vx0GwF8EeyJWTEwKMUlrHs+Ak1twzUuDiIsPry6BCJvzSER6AVOA05RSxatq2/HMUtTS3bYfSBMRa7l2jZsvHl3G9WmfsfjTTHaszOLFkX1RJqS1OUyTI7cQzDBfPNvtq259eUA5FULN+Jh4B8MnzENEIVKugvfenzCzgxfWCDcFP75I0dRzIfNvKMiCXWtwTD2Xgmk3hL0uqKZ2Y9gsYTfgAI/PKS12HOgTZWAQj5Whp7XllsnHVqsBd10/DIhIa1wJLC5SSpXd97oI6OSORIkBzgVmKte3bB5QXIbmEuDLcOhSF8jam8+XD3nXovz17T4oBZfMn0p65z14VqMp/Zid+cEgOgx1F3PodAsYAW4vk33ncfYgx38JMwAWXBr8HGHEkbkMVvou8MzetRTOuLNa9dHUTeITbLz8p8uQF4Uw2el9UmgbzMJNSPnERWQaMBRoBOwGHsJdmVUpNUlEpgBnAFvchziKc9+KyCnAi7juSKYqpR53t7cHPgIaAH8DFyrlr1yxi3DlEy/cvIrcyQ95NiakkH7P/xBLxQoTRIKbWn5C9g7v2GYxTK7+/G26DtuKCOxc0oxfnxqGSBJD7riApIw4MrqleO0KU8qEzW/DpjfBzAKJwUw5EhV3HOx5HbEdLpldm05Y8uJwzKy0kuN7X/kVcUHqMxujl1Zt0BWg4L8nEuxOJOa6rzGsoUetmvmHMBe+AEVZ0GcC1sY9gh+kqTfkHi7ikgYfB5T52H4BRoRS5eqiEGXI+e5Diub7yXoHpP7nQyy2mg1Zv8yYFrA/vbXiqQ1tERpiHMiGxU+CIxfajMLoeTViDRw+5/jpEdjiTh9rsyMtchEBe56Vv54eS/nY877XzsQWj99k+AD0fBijzbiQxldVCv47IqiM0Xs8McdfF9L5HNPPgPxytTpjG2A9z39Bak39ozDPzgXJPgrICLy89lSadYxcOGcgI16vdmyaRUUBDTjA4Zdup8EdL1eTRpXj8HbBQl/4vFyM9vr3Mde/X/o6sSXGKTM8akU6lr1dasAB7DaUHbDB8teG4SvuPCuzAQ07+dj4UJZ//gcBjHhOdhH/uWs+X05fS0JSDFOmj6H/0S39yvtDOQLerJXKZfuOfS+P48OxUOQjlW7hARzzH8I69D8VUU9Th4lNsPGp80IACvLtrJ6/myYdkmnR2bfxVg4nRTt2YElMxNqwQcT0qldGvGjpT8GFDtT+fCENmhZ4G3Bf5GZifjIQxn6LJc79IVo22Vtueyq0OYwjOxlffu/MBX1o2OnHwNcy/N+9XHfhV8z8pDTHRF6ug3FDP6Z953QWrLgs+DjK4Mw7BLg2VBz4tyFmQXxJX2yjg8QmOBCLSfzgq/ycoRTHr8/5NuDFbP4B0EZc401cvI0jR/mfhGz/+DMKZ3/n0ZZ687U0PLJP2HWpX1kMVe3I6FZVHnw6cE1QL2aOxDQD5dkQ1JYUTOXbX1J4OImcvTaf24tLaHW6z+a7r//ew4CX5d/1B/l1/haffX41TXT9GO1b3cxtwAXTFOwFVnIym7B/fQv2rWnFtlsfYcvt9/qNVFFZmbAh8F0ZuNcTNJoKsGPWN14GHODwS69z6J/wR3LVKyMe06t2ZHMLxsv7xvntS0i3kmCteCUd9WfgGeVRDw1ld774NdSr3xvFoe3xJduKPbAmQ7sLva+pFB9MCZwy9eLTPg/YXx6LxYY9z4prndz1o+MssuD6KHumIXDu28+mCb5DDtW2X0O6nvPTsyukn0ZT8MkXfvsOPPJU2K9Xr4y4EZ8YXKZ3zSdzSmoQzxT7OTRo57lAOeruLry6v5JbijP9u0MO51lZvyuVG1bGuoIV/Rjy9dNP5O//jaDwcKxbxoBmI+GEb32mwb3hUj9hgGUoLKj4TPfQgdKt/k6nWw9/4Y8OB9l/LPJqNkP96OfuxFmYHVxOo6kh6pVPHCD54Q/Jfvh8352GhZQzb6hehfxgsRg8949vF0XlTuguN3f0vfD7Ex5dr37vyimS47SwtwAaBwhusWcnsOzNkRz94yNBL/nlR77dKFXGmgK4UuQqM3hI18EvviLl6PIFCUIPBVPbfoeOJ1VAwbqHaTphzc2QNRewQMaZSPt7kQBrIZrqoV7NxAFsMTGkPvw+JHiuKBud+pJ231SMWhAnHpRuwRftvOh7BwDWTmOg5yUeXXmFpTvMDoQQ/NHnQ//pa6uD1HHjSp6rYCkFAOdhXzm1KxDPa4nujIdVxSzYCQt7QNYPuOLzHbD3I9TCXphbXqlp9eo99c6IA1hi4mhw/5s0eOJT0h+dTvpjH5N22X0huVtqA5YjrqzYAbYULG1LE/JYj7wazvgK3Im1bjq5NF/5z4csgePBgfimNZvQP3nA4JLnAYoZlSCG9w+zdAqUWbkce32m0a8//D3Mf9+OVzDth6tPl2ggMZvyu6iLnzd97vGwX65eGvGyiMWChGIJagFKKQpz3iD/4GU4R00sMcIB6XAWltPnejVbExtivfAHrBf/RvMb5lM8M521OyZwFEqIOJ2h+bobZlR8lls27j2UP118F1dxC6VMzP1fYe6cjDj3QGKI1dWzan+x6EihikKIt1+uF3+LsU8ZQqsjMzEaFr9vpWkxmgxYQ3zDhmG/Zr3ziUcr9sI/sWdfXPLa4fwdx1CITfsDI2snylmEsiZiJDRCYtMqfP7DeXeTmvA0haZgN8Fm+N6hmTK0W+UH4QOrtXLuq7SrrufQ5FfdOjopG61SnkZD5mIuftGzcftzSLsU1Kp0lMoN7FzpUH/94aoghB+wooqFidZV7BtL96G06H4QV60bT5wrP8F6RHh/9KJjClrPUUp5GPCyFB46CtK7YGT0xpLe0a8B/+WltdxnmV7yeK7LLOwFpflZRIQ1G68F4KYVMe7r4vE/Fujx4Hkh6WwJsap3z76NQ5IrT3K//hit2wJgizMBk+IZz4H9SaxZ1p5/N7agxTVLMJy+wxxzWu0n95yNKJwBfeuWNvUvzWsxEt8xBCltRgCY/0BQEbX197BfVr/7UUB+VuDY0vz93QP2vzJ4Dt/ctsyj7cDGXB5O/AzTLHV7tGiRSubuWzn2nD5cvzaBTQUusyhWofmlJ3D098EjUsoy/dszgso8+nwAf2sQWtz3EI1uvQtJS8eWKBSlZPDzDwNY9Xc39u1tyM6dGVitvsMDsxvbIQ0QyD93D87EIpT7H5TxZg5/zqdPvb4gthDWPxKPiLwidQRp1iv856xvCbCikbx9vYCioHIJjdZ6tf32yjpm37zUo00Mkz5HrqF1+z3sNQYx+gPvre/KNFFFdiQ2xsMHXVFuvHQWn09b77Pv7Eu68/zkCiwwBuGdFm96vO48ZiEDJ/zk5RZyJDnJb+f+8Srbly/E/JWCcdCK2cBOzKCfsMTXvRqVFcX8vWtggT5zMOLbVosutRn7ondg2ZsBZSyXz/e5pyIYOgFW1BPaImHevnNJaPSRR1t5Az7o2KUcP6I02qILM8h6bAYJN72FNaURpt3BxmsmQl5+iYwkJtD+1cewxMZWWPOX3x5DeoO5TH3V807ggWeO5eqby8duVw6zyMmPl87Cfd9Q0p6317cBzm9t+nafxyuKjimNtIix5gHaiNNzBqz0U6+z1a3agLux9rsQRyAjPuDaShnwYOiZeBSQd+gGcPwQovQJJDR6DQB7gZOHEz91NYviius+o2FGgd8QwuT7ZrLhfP+bnTp9+EqlZ+VKKQ4dLCA+wUZcXPjmDva8Ir4Z+DoHD8bjvXNTceEX/weULtIqFDlHOEIKE0+yfovF6BQ2XaMZs+gwLD8H7JtdDXGdoPP/YSQGmaXXM+xrZsOvT3t3dD0d27GV318RaCaufeJRQFzKsxWQ/pG87NkAFOXYS1qHnfRnQAMOsON/UwKeecPlt1VAD09EhPQG8WE14ABzx74boD6EsPjdQZU+tyE1U6mlNmLEpGL0n4Nx9FrXo+9X2oD7wNZtNNbxb0GzAWBLguYDsZzzSZUMeDCCGnERmSoie0TE544HEekqIr+LSKGI3FGu72YRWSkiq0TkljLtD4vIdhFZ6n6cUuWR1GEMIw6JuQi2WbB9l0LMd6nEfJeK7bsUZIfV24gV3g5AQsNS90e/gRuCbuLJnbc0sEBBEQd/+LniA4gQhYfyKdqZC4DN6nur6doZx7P6y94lETaCBK0b7cJAJFHX69RUGGnQAdvo57Bd8jW2U57FSG4S0euFMi16G3gFeNdP/wHgJmBc2UYR6QlcCQzEtSo3R0RmKaWKtwe+oJSqyBSzXhPzTzpqTRLgNkRubCsTYaWiaEg2xJUaHKezEIsllgbdEjmwJhcJ8nMdqq3a+84npI+omSRha37dw5Nn/Ej2XtcdxqDGOXRLd7lKEhJMfO6uB/56ayQ7l3Vk8I1fEZdWhHUbOFrj16VimnD3sY/y79K3Stpadk5hyvJxIcW1O7N2onatQtLbYMnQ7hhNZAk6E1dKLcBlqP3171FKLQLs5bq6AQuVUnlKKQfwE+BndUQTCGU6YM27iPtfMaWvhZgF5YpgKpdFu23FaAAK8o2AhjpQIqkftiQw7os2jJjRnhEft6VD0otMf2dFtc5SNy8/wL1Dvi0x4ADNEuwldxeu9aLyW51L2flXBz677BasA9eR2OlfRC71KVeYb+GspAf4d2mBR3vm+ixOb/RBQB1Nh52i/43C+eF5mD8+hvOzKymaNJSipZ+FOEqNpuJE0ie+EjhORBqKSAJwCtCqTP8NIrLc7a7xG4wqIleJyGIRWbx3794Iqlt7Mf/1TjBflhLDvrf0z2lYGrn6RLj/wDhmzR4Z+ByGt/FzmjB6RlueWtKMHNNKca5uu11x51U/0Db+Rf5dH6RsWxjYtPwAt/ad7bUh53CRxeOHKSE+cPauS7ZfUfI8JeZBkqy/YjACiAGSsKo7eGS0/5vD/Bwn2za4duGZDgfbHniQzVdMKHkUTRkJznzvA/94maKZd3i3azRhIGJGXCm1Bnga+A6YAyzFtT8a4HWgA9AH2Ak8F+A8k5VS/ZVS/TMyMiKlbu3m8MbgMoAl0+0DNwZ5RJHEp8YyYfl1WLoO9nMkSIMWxA3s7dF22bctKSzZzu5de1MpGHrEO+zbkxuSfpVh9hurubHvLBTK4y4E4I/dngnLYmKciDgonY27/k85KtXDgBdjMZqRHDOZ1Ji1pMYs58lzOrH2j8A/Spd1+wJHkZ2tV1+Dc8eOknZrQh4SqArQjsUUrf0m4Lk1msoQ0egUpdSbSql+SqkhuBIJrHe371ZKOZWr9tX/cPnNNf5oF+K6b4JCrKeR0OAdn91JZ91D3PmPUN4YG237kHL9JFrfehVGy6aAy0DvyI/1kvXFKYMCuxkqS87hIl6/3n9Iab7TwuI9tpJqQyKQmlJIUmIBMTY7sQlORn05htM/OzPotZbO38kfszJD0mvBRRO92pKah1Btaf7TeqFUE3YiutlHRBorpfaISGtc/vCj3O3NlFLFFYlPx+V60fjB0qAjgSpkgsulYu3/M5bY5IByMe37EnP/TL/9Hf/vAQ7/tYJ/H58Usn67dkRmJn7HMcErA608mMzWHDujWmUTb3MZcpvNSdNjm3H0lNND3lzx+u0LQ9arbYJ36lWLNdhfyE3uXkiqXL4YjcYXQY24iEwDhgKNRCQTeAiwASilJolIU2AxkAKY7lDC7kqpLOAzEWmIa9HzeqXUIfdpnxGRPrjudzcDV4dvSHWUUR/CN34qEgFg8WvAnQV2ts1YzK6vVoBSNBjQltS+rcnfdoDUHi1IO7INYpTOuFOPPIJeH78MCS+FTf3iGWhFNgtlrs1xPRFwKrD4cKkAZNltTP+3AWLADPtFldLv4J6C4EJAjMXpM1Qz/0AKMUkhrA/YQkgfrNFUgKBGXCkVMG2dUmoX0NJPn89YNKVU5b5p9RhLenucZ/8MHw8DHOV6rcjZ3jU0iw7lsejqdyja6pkSc/uW/Wz/dEkIV40jFHdKx24N/PbZdyyBb27xbBzxFLY2x4Rw/VKUEDS+OyHFFlggAD2PbsyCGcFTqjqV7/cjb08aqa0PlLh1/CGxSZVVMWTy84p4us1MCvY7QaDpEamc9dZAWvT1/3fSRC86d0oUYbHa4PxfAHDm7IDdS6H5UVjivb+c9uwCfj3lxRA3tvjmguZFfLAjhmCGfMY87/zISikcX14L+1d5H/DDROyDbsHWM3CWwwYt4jiwvXSG7Moa7ns2DnDZ8z53JYfEOXcdUWLEkxPzeOvpj0iML3WRzPyhC69POw6naeAUX18cg31rm9Ooy46St9zLmHccXmn9QmWiMd2zQcGu5Yd5ud/33PjXSbToU7NVmTThR2+7j1IsSc2xdDjFpwF3Fjj4ZfzLVTLgACc1NbmspR1/J2rVLonN+beQlh7v1ef46BzfBryYhS8Gvf4Nrx3l8bq0Roq3PjHxwvBLQsl97ZuGLYrdHIrpL31AYrzLbVJsiMeOWMezE78gJSOGFg8/5PMc9pwEdi5pT87eUn1LaNydmBHB801XBS8DXo7JwzwrPG1Yspe572/k0B4fYZGaqEHPxOsYTruDBcOeCdv5hjZ2MiTDSYdJl7DjkElqeizde2UE9G07snZB3k6//SVym3/B2vZYv/0DR7f2bHD7xg3AKGMincDnOVXz0DVq5gpXvOa8nz2MN5Q+79FpH58s74slo5WPMxRjkL2lI9lbwJaUR9Mrz4GOw7DEpQQ4pur8/vq6oDKFh113FovmbOPBMeVK9gm8t/WskvdBEz3omXgdY80jX4X9nIZAs1apDB7aih69GwddnFQzrwnpvCozeJWTEy9r59kggDiJtThwiIlD3P7yMPDAx8dz8pAAxlBALXFliMy4PXgyMHtOAs5mx0bcgAN8ef3SkOSWzs30NuAACi5q9QkH9+aFVzFNxNFGvI6x94c1ETmvNakCBY0LQ4iZBji4OajITZNLZ+rJhoPTMxyMy1CMbAjjM0yGpZVf5K08x49vj9Xqf2FSAA64jHxi98DVlIrJ/uXX8CgXJu4ZGTil8YUtP64mTTThQhvxOoQjL/C288pibZSIJbYCnreYtNDkUoKnei2e9VtwcGJD90RcSh/pNjg6JXyGPGh+q0C7Mn1gxMRg7l6MOWsE5pdDMLd+X3nl/FC2xF5AuRCKi5hO2Lb2UBU10lQn2ojXIXZ8vTwi5x30zoSKHTD+7ZDEjMGh5RO57cFunObOuFB+liwCzSpwk1BlYkNwjRgmaX020XL8H6QW3AO/XQ32g2DmwpKJmJ/3C6tKS6d7VqSPiynk6D7rOK7/WpISc0ras0OsEDXzlcjczWkig17YrEPYksNvzY75+mZi0iu22GVLbIg9pR1kbXI1NMpGWua5ptEK1EEr5B2PxRa83JuzyMmWSSsCx14DG7/YSMdxlY9O8TxbgLCeLqWJOBvdeCP7Xn65nICi+dg/scYCuTF+T2N+3h/j9PBUqcrfX1x/VTFqyGLSUkr1b9l0NXYHfPbtgJCjlWLitVmIJvRMvA7R9KSeYTtXfJuGHPPNLRU24MXYznoX2gyFLruRVnmI4XaBGCANHBit5uLcHzwh1Jp3Q5sV/nzdgkrp6UX7sQG7jW7nlDxP6tMb20DPtD8pR/yLNQ4oKv7V8ffrozA/74/pDHG7fgAGXNEegKP6rCMtRXm4m0TAZoUxw5aQHOLX/Yzbe1RZJ031oX9y6xAiAhYImmilLFaDvq9fSFpPn5tuq4TRpSXs824vmVVvvRlnfDssCf7LfG37YavfvvI48h1YqziLtBxzJ85/v/Td2Wo4htVzdt3i6qsoGn86e6a8iWPLRtJ67EUElD0UPRTMHIg59g8MS+V3m8bEW2nUNYl2LbN83rGIQFKCiYEweFwrfvtim99zHXdmGxo01akBogk9E69jxLVsGLJsl4fGMOzniREx4ADs85thuJQNlwTsTmkberX5ouyi4EJBEDHg1Pe8O9qPwTrsUa9mZ34uWc/eQNyhv2g8cG3ZMxFSNWaAud47XivKjT8GryV6y1/H8cCnw7nw4T4++y94qBf3fjSsyrpoqhc9E69jdLt/NH9f6a+SXimJXZvQ/OReEdNDmSEaVPNgwO4B9w9g/bvBN7IAxDaIo1+7SezeURrrfPE1PXnipZNC08WNNb0DXPwbZsFhcBZiJPrOOqiU4uDDl5Ue1yDHp1xQckO/2/BH/qadgdcNBFKSXU7xC+7vwwX390EpxeF9hcTGW4hPqvydgKZm0TPxOkZaz5YQxKVgSU9g4FveRRLCin13WE4TkxRD8+HBQxFtgxrSJvFFDwMO8O6klbSMfZ49u0IzsGrfL6gf+6F+6In8cgyy/HqU6ds/dejzKR6vzfyyrpbSUnEKhZmSj9k+C7NDFmazLMwK+byCk9CjXVCZuNZNPV6LCGkZcdqARznaiNdBjpl5Y8D+oz+5NvJKWEN06xhpQUVGvncy/e8PnNxq4tf/BOwf1HFKwH4Atf0bWHoNmGXi7XPXwI+9UVne1ZWcCz1jvvPWlTGS7vziJiaqfTY0trvWKwwgEeiYi2kprhda9a9hTErw7IiGTd9410W0Ea+DxCTF0/+jq1xGoywCfV67EFti8NC+qiKWBEgLnKUQgA7BjSvAEdf14sKNFxHfxDPZVnzTeIb/OC7o8Xa7ybrVPlZZ3ahDq2DNnf5P8Oe4oFV5zPw4irLcVYbiTUwpgg45rm9ZWVdH8fN27sRTve8Prn9+AetufIzVZ9/C2qsfJGfF+qDHaOoH+qe5jpLcphHDfrkX02mStWYntqRYEts2qlYdjLaPYW5NgAM+FgoBWjyIJSl0v7wtwca5f5+H6TTJzcxFWYW/39vCFw8s9ZCzAEkWyHF6Bups35pFl+5+3oPF5/huL8uf58GgjwBQfnZJ5vzZnfRhqzEtJnRwz7R9+ard4ehmw/ZY258W8LLbP5zJ4c9L852YBw6z5T+vsnhnK35a1Yr8LAfpLeO55OzexG9Y5vMc8d2Du1s00UkolX2mAmOAPUopr0BkEekKvAUcCdynlHq2TN/NwJW4PrL/U0q96G5vAEwH2uKq7HO2UirwCpemUhgWg7SeLWrk2iIWLG0eoLDJXSizABt7IXsexB+BkTwoaCItf7w7ej6bfthb8tqJWTLbvTXDRqvY0hvMHIfJg7tcxrR3v6blTwWA2u0jIZQvskurCKp8/z72g/O6kTh8tav8lbhm5rc+egyfzOqE07SQnFTEG4/P5YRjdkCHvgEvac/L9zDgxTw7szcFjhiKC4QczMznpecNbjgREuPK/W5YLXR4+KrQxqiJOkJxp7wNnByg/wBwE/Bs2UYR6YnLgA8EegNjRKR4S91EYK5SqhMw1/1aE0WYDpOiw/k+XQyrlu2hc9oLtI51PTqlvkbn9Kl0aTqbj2cPwpJyVKUMuGkqHrJO9zDgABb3x/jJ5jG0ijUQkZJHktXg+ZaxJBuw6Lftvk+84pYK6yJxgWKpBaNREQhs3JxMswET+GhmN5ymFTDIzonl/JtP4fQrR4EKXJ90wy1PerVNmtPZbcA930OF8PL3fflueQuIT8BISSTjnBM54tOnMWL97x7VRDehlGdbICJtA/TvAfaIyOhyXd2AhUqpPAAR+QlXseRngNNw1e0EeAeYD9xdQd01NUDBvlzmjnzDo0JcbLMkTpg9AcNi8PR9P/Pqs763kxcVmtx97Vx+/nEbr71f/uMSnBc6+y/w3MUKsYZ4/TiICEopHm4e61FH1JOKV88QS5CvjtvbcuyZxW4ab6f473+34LtfGnLKuQHOc9CzKHNekcHe3FT8x6ALf21pwqp9zXk7O9CJNXWFSC5srgSOE5GGIpIAnAIUZ9NvUqba/S6gSQT10ISJgv05zB3+hleJz8KdOXw35FXy8+x+DXhZZn2ynpVLKxaC6HSYZG32X4Hm4kb+88aIuAq6DehSxdJkVs/j0x7x4+sHLI3P493Pim88/d91XH3tYb99vvhtXbOgMlvIZmXBIfrHTKJ/zCQGJbzB0t+CF+nQRCcRM+JKqTXA08B3wBxgKT42hCvX/bjfqZCIXCUii0Vk8d69e/2JaaqBuSdM9tvnzLHz3nN/hHyuUwZ9SHZ2aBXmAQ7+e4hAxjDoB1kEu5+CBwE/gGVJH+Dx0hobS8OnpmMbfhYYVkhKJfmmp2n09MdYWj3Efc8Ey1Yo5Oc7Mc0AVy9392CIp2xsYgHXPf8Bbyx6mLMe/ZgN1oMUWZXHW+V0KCYM/ZIdWyr2g6GJDiIanaKUehN4E0BEngAy3V27RaSZUmqniDQD9gQ4x2RgMkD//v2rWDWycijT9aWo7EJcXWD/0sygMkve8x0Z4Y8ejV5n0eYJNGmWHFQ2f/anQAr+DHluAcQG2LMiQIM+3jd8SjkxcWBg8XvuErp6hwKKCKknnQUnnVWu3YLdGVpFn/x8O4mJvn3WbZ68jS13l6YvGNRxD7+ucy1U3/La2/QduhmAi888j43rm/kdg6Hg8b7fkFFoYBYpYhItjHiiF0dd1zkkHTW1l4jGiYtIY/f/rXH5wz90d80EipNmXAL4yThUcyiHydI7P2DBsY/y85DH+Pm4x/jrmrdw5lU9P0c0snvev0Fl+knF35ujOr4ZkpxjR+Ct6TPz/LtalFLYDbD5MJTmvnehiesG0VcBZlXc2uYqJNa7KHUgevQKvuHJYhESEvz/+iS2b03ScaUz+sQ4B+Dgwvs/p+/QzYjAD3M6BTTg6abBSJVGgywwCxUoKMpx8vVNf/No2icU5YevqEYkUE5H0Bj9+kwId6EyDfgd6CIimSJyhYhcIyLXuPubikgmcBtwv1umeArymYisBr4CrldKHXK3PwWcKCIbgBHu17WKn094nKzfPQ1XzspMfj3p6Xr5gYpN865oX54WoaQzL+e7cDoUG9b634RTTFzXzgw5ZoX3Cdz8aXdiKrz+NsWvb9rqOyRQHfwCBMy0Ird6nv8AzJQinA1a+zw+EDO/Pz+ozOPPnhD0Dq/1TRfT8v5rS8oODe/zDyeev6wkV8oLT5/g/2AFR+H6OooPI2/PMXks+TNy9te+2pp5v3zP7lvPZ88dF7PntgvYfev57H70lppWq9YR1Igrpc5TSjVTStmUUi2VUm8qpSYppSa5+3e521OUUmnu51nuvuOUUt2VUr2VUnPLnHO/Umq4UqqTUmqEUupA5IZYcXbMWUagIig/H/dY9SlTS2h1evBc5ZakGKZ8OsarPdlp5VR7Y862N+Nsh+txlr0Zw+wNiDWFD6as9HE2TxpfcDbt2u5j1EmLATulxrzUqN+3M7fEkBc/nEpx4/YAYXzKPQuNA7NpEWZaESrWiYp3YmYUYTYtggQFO+9EqYrlO0lNjWfcmf7dFcce35IJ14ZW5Seld1e6T3ueF5YOwdHT8+uSm+MdblhMZ+XanevLgJflmabhL7BdFQ5+P5Psz97y7jiwh923nu93s1V9RG+798HGp2YFlVl62wfVoEntISYtPugKSt+nR3PSqZ1YurN0Y0ljewyjzAzisSBl/hkIGcRymrMpKZuDfyEtcXHQuiWNM7K55IJfuOi8efQ/cgPt2u6mX7/1IIrDCm7Ykcu9O/N4ZW8Bt+zI5cYdeYFTTaUc7/k6DlS6E5Xq9Epb4MxeGFTP8kx5fxyvTBlFYlLpm5feII63PxrHF98Gn6mXZf2ivez5Nw+rzXNEnTrvwd/SbHuC30GB6/DNv4QnaVk4KPr6o4D9B95/pZo0qf1oI+4LR3CjkvVncB9xXeOEOVf67YtpnEiTY11buxs0SOTNGadiOGEoLr+wr5lgsUHfOWMv9qLgftn2jz6AtHRlNDQM6NEtkyHHrKZ7F89NPIdMxeoiJ0Vl7FpMjO+PuqSNC3rdEgpDS4lbnnMvPIIt+25jX8Fd7Cu4iw07bmLMuIovKD4xbh4AX7/vmTv8+UkzfMq3M23urOahLcgvfNU7yVdNsH9WYAMO4Pg79Eiouo7OnaLxwnQ42DfpCdi0uqTN1nMAaRffzNCvL2P+qW95BIum9GjMMe+c53GOEad04GjTFVcdihH5+q7lnPbikUHl2j3+EEopcletpmDVOsQwiGnWhM7LlrN+nf8Quikf+C67ZsR1DD0pbOIxoUpGhJxDrvQBToeV37/rytEnrXXlCU+xM2b8cmbN6EVZt0qHILNwEZOmDbJISyzEajiJWb2Lfz9KpP25fSI4iuA45vrf1KXxRhtxH8Qf0Yz8FfVzc0TRzkwOPetdhd6+chF7772cjKfeYfRft2HPLiBvexYJzVOwpXivaIoILUO9lQe2LQ59WURESOrZg6SepbUg5yw4kl4dXiUnx3tG/8LrIznlVN8zXxEDmtwHux8Pel1rQs2G43Xon87aX/Yjhkl6v90UpUJMlqvv3v/8QIMGebw7ZRDFhrzYgeWLJulZtG5SutgrApgmqx+fx+rH53HEf0bQZvwRER6RJhxod4oP+j53UVAZW9PQYoCjCaWUTwNegqOIvIWuW3pbchypXRv7NOCVodOIqm3aTUmNZdPeW3lt6ikcN7Q1J57cjg8+G8+evDu56LLeAY+1ZlwKCQEiPABavFQl/cLB1S+53CijbvyVNn0OYaYKBa2EgpZQ0Eq49Nnf+eHAi5x97hqaORNo3sf3DlWL4aR1k5ySQsoA+w8ksHd/Cnv3J5ObZ2PFQz+wa37NuAyNHoGTggFII73JuxhtxH1gTYil7S2BS3oN+jhw4YVo5MB7wQ1V7hfvhHy+5JahJ1067uYuIcv6Q0Q4+/yefD7nXKZ9cRYjR3fE8JsvxRNr+zeg2dM+etIwOnyBNf2UKutXVdr3aQgxcPbD8z1LsZV5YRhw9etzMBBOfMW3MWzfvPSuZ99+G/sOpGAqK8V1QfPy49m7P4m/J34dmYEEoeEltwSVybj7/yKvSJSgjbgfWp85iMHf+87J1XfqBAyj5t66Pz/dwitn/8ysJ1bhsIevzJdzWfDFoq1bY7mh4adcLh9xuXzEM8N/xOnwrcNpL4QWPtdlTBMS0ms+y5614XisPTdg6bEeS4/1WHtuwNpzEUZ8j+AHVxMPfj4Uo3yxj3LsXNCGYb13YdmdywUzj/XqT4xz+dYPZ1lRJS4vKfO/AAa7tsaTs7uSdUOrgGGzkXard1FqAFIb0OiZtxGr9gQXI9G0caV///5q8eLgCZbCTdHhPA79uYnYJsmkHNGqxrbfr/95N08e/6NX+7nP92bkLd2rfP49twfOerdhcwPenHEcvmKSG7SJ55oPB9NxcIZH+12x01F2L/ESOo9swoSvj68VKQ3MPTNg6yNAIcS0g65vYcTUrtt209xFdv4Qn0WRd//ZjAXnXlKmxSU05NUhNB/Wgo3f7+LPSRuI27SapDg4lJXkIeeNAoTz1p5PXJjcZhXFmZ0FphNLahWTl0U5IrJEKeWzRqE24lFC9oF8bmr0hd/+Ce8N4pgL2lfpGnvuvhgc/rfOT3z+VLxrjXly7vN9OOnWriWv7UVOnukym0NbPLfF9xzfnAs+HIw1Jsi0showC/fAiuN8d7Z7GaOht2stc+NhXr7tDwyLcM1TA2nTJS2ySrox1QGy847yMuKOPAuf9ywuL+f99xkz+xSa9HP9IOXtymL6kR9BKPligKbHNGXUJzXvTqrPaCNeB7gmfTqFhwPHr7/pODdkH7Av8lctIXuqb1+jw2Fw/39PJZQv/eSis7HaPN1NSins+U6scZYq6RgJzMWB/fHSb40rigXXOC7oPp3tG8vtAhX4NusS4uIid5vvdJrcOPRTHvn0fmxJHq5wPh94NY596fj7+8SkxXDR2gtKXr/VfAqhelPFIly67bIqaK6pKoGMuPaJRwnBDDhA5vJDVbpGfI9+WAcM9dm3Yn1zQjHgAN+9uNarTUSISbDWPgO+5b9BZVRW6VrBnWO+8TbgAApGJoe+6FtRnE6THkmv0Hp5Dt+MneDR5yiwBDTgAEWHPO+wElonEWoxDLHWrr+ZxhNtxOsQG36rer71BudeQ9qdz0J8afkxS4fuGKMmBDjKk1mPrA4uVFvY+2pwmUOusMoDu/NY9F3g/QMzp6wJh1ZeXDv+K5QTEg0L2RuasmbqkSjlqt+5Z2Gr4Ccox7HP+F7b8EXv2/pU+Pya6kMv8UYBeYdDS/GauSI8taZjmrak8WNTPdqO2lfItJuXhnR8UUHtTm1aYeLaAvCfC7wXlcsz6e5FjJ3QLewq/PTNZkAwlcIiwl8PncKmT3tx7CufE9MgK6RzFB4uJDbVlRCrxZAWxLeNJz9AtSSAmPQY+tzYp2rKayKKnolHAU8c/11Icr1OaR4xHZIbxYY6caNBy0BFhGsPIWclzHwGgNUL/dYuKSE3K0AoTiUxs0qzPP5tLyxJr3twRUu+Ov5G5oy6DqWC/3H2Ld/v8fqM787E2sD/PK7LtV25YNWFldRaU11oIx4FbF+eHZJc31MrfltdEe79fbhXm9Vm58LLv+e+R95nzLjfsVic3DhrSET1CBsqxHSmqgDz4I8kJFd/LLvpdMDysyj2X/9uLyTH6fSRN931CISl3GKzLcnGhSsu4vg3jqZx0300a7aHtLQsiDE5Y8mZDH5gcDiHookQ2p1ShzBNFdGFw46DMuh1ahOWf+VKWXrUsSu5/CpXmngRaNN2P2PH/4k0OgJIi5ge4UIMG4okoHRDi9pjg8PxlNx2JBUgzQph/0wmTr2Viaf+4Pd8KQjJNgv5BwuJT48Nj5JrbwbglKHr+Xp+F0B4LzeXc+NSKbs/qsgOcYEuaUBG3wyv5j8vf5P8dbtJdIeBx8Xmkp6Wiz1zPzRLYcefe/nu5oVkb88jo1dDTnt/MPEhFAipDg69dgfs/qfkte34s0kYdm6t2HNQnegQwyjghiafkrs3+G36W+Z5QWXCwea/9/PCyO947jlXZIfP78y4L7EkNa4WfaqCefgP2ODaIKMy4yG/2DIKpdEbJhw9Hkvbezne5l1Orh0G3a2u40oMiA2uWjmW1FZJ2AscWGIqF1pp/uLyrysF3YdfjcUhHKtc72usAek2ByKwr9CgZWIRjRN9n+f414fQ8fQOHm0bJ80j893ffF/XhL9WtPPZl9w6nqvXnF7hsYQL0+kk65EzfXc2aknajS9Xr0LVQJVCDEVkqojsERGf5VdEpKuI/C4ihSJyR7m+W0VklYisFJFpIhLnbn9bRDaJyFL3o08lxlVvuGG6n40oZUjKqL5b/bZ9G/L8Nwc8Eih58cVp1aZPVTBSjwJAOXEb8OJt55R5bsA2l0trXqFnvPRRhs3bgAOOAniyzSwmGtN5IOEz7rV+zERjOm8Mn4u9qOKpEkRg5fdv0E81cGsmFJnC7kIbuwpsOJSFzTnxFCZ6T8ePfuIoLwMO+DXgAH+taIW/EMTsrfnMuuLXCo8hXGQ9eoH/zn2ZOHb847+/DhKKT/xt4OQA/QeAm4BnyzaKSAt3e3+lVE9c28PK7uu+UynVx/1YWhGl6xtdhzbhxi+8c2CU5cm1o6tJGzfbgn+Jnes+rwZFwoC1C+wL5IsQyPwRpRSGYfCT/QrOuLEbaQgNDQsi4mHAnSYctvv+am2at48H4j4la1fgqBBfFBXEkIA1YH72Zf8aXPTPBRzz7GBGvHMCl++8lO6Xe0fLKNP/HXhBIQTbzbn2oy0V0DzMqMKA3XnzP64mRWoHodTYXIDLUPvr36OUWoSr8GF5rEC8iFiBBGBHZRWt7xw5thVv2s+hzZFpHu3WWIOXD55GUno157YIxVWy3EeNxFqI9P4C8oqz+PnHXDet5PlNzw/m+LR4n/7XQ0VlZ/K+eaJ5xQsf7M1sEJJcTGIMXS/sQpuRbfz6h50Fvt1zrU9azLbDST77ogVzXf1yuUYsOkUptR3X7HwrsBM4rJQqGyv3uIgsF5EXRMTvNEhErhKRxSKyeO/eqm9miWYMi8HDi0fxpuNcXt43nilF5/C//HNISq2BkL4+VwWXKYyOv5eIAY2OJugOxuVveLx05vqTL+uS8c/e9YHjuw9/+KxHxEl649DiwUPBEm/zausw9hfaDl3H4T3JhBxPWisx61Uh5YgZcRFJB04D2gHNgUQRKQ46vQfoCgwAGgC+c74CSqnJSqn+Sqn+GRneq+vBsOcVcnBFJstu+4j5xz7B/CFPsu7Zb1DO6P0jG4aQ1CAWi7XmIkQtjaqeNbE2IQPuJ6jhchYEPU9F4gRWf7ndb1/O3I9xrvrd43clOT0PMCn/Y2MAtpKH8NOr63j/vaUcf8zbXHLh5xw86O26ERFiWqWVvG45bAktjtqCCDRoccDrGuWxJtRgdHJqs6AiqrDi7qpoJZJ/iRHAJqXUXqWUHZgBDAZQSu1ULgqBt4CB4b64cprMH/w4v454lmVXv8PBP/4BU4HDZOeMv/hp6NOY9ejXWhMYI6kZJLUJLGQJ7rKqSHRbfIAc6kU/Tnf9fzC25Idh0YLO2Mn3MK9Wir3Xrgt/atvEqbd/znVXzeHvv3bx+WfraNP8JUaf/IHXNY764BqIN4hJyaH9iWtLdB/34KdBdb96Y81Fp6TeGjxVgsTWTOrcmiCSRnwrcJSIJIjLMTccWAMgIs3c/wswDvAZ+VIVfhr2ZGABp8nyW6cFltEEpncQl0qK7xC12ooxZnpggSM9S9cNf9lfYWdFKMmlep4RfHNW/p+u93DJLx158f6zyJd49xVUidOm2IBPs20mz0+m4J9/2sYLz/3u0WZYLQydew8D7vnToz29eRY9T17sYxyu18dcs5f41DDFwVeCYHHg0qQtEqxyRh0ilBDDacDvQBcRyRSRK0TkGhG5xt3fVEQygduA+90yKUqphcCnwF/ACve1JrtP+4GIrHC3NwIeC+eglKkghPQdhxZtDrhKrwmM0fNSSAyQw3z4C9WmSzgQEeRMP/lRmgzE0vFUj6Yjr+hKox7JXqJptuLPlP/P1tHXdwyxmpHB4Tld+e+D40pasnHdQbqWYl0GLQ8H9sCp3nn4gZ98tlvZ6XUHMfKmb7n8zVdo2jkTa2w+tvh8WvbaxBVv/Zejxr6BMkPL5xMpEq73EwsuFpKvea56lalhgu7YVEoF3EGilNoFtPTT9xDwkI/2IFVpq4ZZGHr+CrPQjiW+5kuDRSMiguX0D3Cu+QyWlIkwFSuMeBlLYu2qihMKhi0Rde4fmFvmwoaPwRoHfW/Bkub7x+qyRadyYH0WX132Cwf/zSaxcRwFB+zEFjnJFSs5e8rNJgw4/fV+DLqyY0W0wuGIpcRCC+QrkxhKZ5vrjcNBz1LRfX3pzQ5zwYt+0uuuvAF6TfbdVw3ENG6J9Y6pZH81CbVuCdisxIy9gYRegUNx6yJ1ctu9Eee98u5bUEKX1fjF0u0M6HZGST6P2rDt2Sws5OCceZh5BaSOGEJMRmjheeD+cWo7AtqOCEm+QecULvk1vJVv4kZdSsE3b/vtTyp3E52sqvA5Th4M2f43/vjkYM1t9inGSE4n9fx7alqNGqdOGvFQjUjnu0+pFQanouRuPcihZTuIzUik4YDWiKV25DGrDe+lWVjIPzc/CNml+VAOzfqeuO6daHXfLTWnWAWJP2YMBb9/DYf2uGfQrnqXxRiIx6aftiqJX9jvdZ6yHNHLT3RX90dgYWg/WKVoN2RtoU4acYC+ky/h76sCV1ppfmqf6lEmDCinyfLHvmXHF6u8+lqf04ceEyv6Jayb/HP5bT7bC1Zv4MDMb2kwdmQ1a1Q5RIT0218h57sPyZnzDa1Ss9l2OIViQ65QbrMu7CKXpbacUrvq57f014VX+L5WXHNU72mwrAK5d4zoSDdcH6gdU7gIkNqzJWmDvfNFFNP1wbHVqE3VKDycz5z+z/s04ABbpy9l+SPfVrNWtY+sX/8M2L//k1nVpIkLZTopWjmf/K9eoOivOSizYjlTxLCQfPJFxJ77MKf13l18VgBy3Iubv1p2uww40Jj4UpFygSUbt1wX+FppvSukG91fqpi8JmLUWSMO0OfZc2lxwVFe7V0eHkvTk4+oAY0qx49Dg8fFbv98hVeO6frG7q+CFM+o4L4Ae3Yumx6fxIbrH2XfNwsqdmzWPnKfOo2imc/iXDGXojmvkPvUaTj2+9/gEwgRGNdzW+n5BbZLAdnFESnimpU3UQmkqVhilUGcMvh90eVk5U+kceOUSl3XJ03PQRoeE77zaapEnXWnFNPp+uF0vGYY9qx8rMlxGNboih/99coPKe8P9Ud+5mESyuzCq3dsC1z/siJsnzSdwz+UxlXveXMGe96cQbsXJhLfqmnAY53ZByh85VKffQVvXE3CxC8xKhDHnNTFVbGpVcMCjmh6gBW7GgDCaovvbfixWIh1R660bZsW8nVc5iBIbG7vd5E0nxlRNTVEnZ6JFyMWg5j0xFpjwAuy7Cx++x8+ufQP1s7xPTNTSrH9gZvIWrydUPNYWJMqFiqplOLAphzyDwbOCldR9m/PZULjTzjH+IBzjA+4OPkj1v8RHXlUAPJ37vEw4GXZdOtTFO3zX8tUKUX+yxcHPH/eu36zTPgkJj0JEqyAYmiX/XRudAhQmCGkaNn6z6HQL9QoyLqKrYk24LWQOj8Tr00U5th5rvNX5O4ujWNf+p4rpeeNy0fStEdaSfvuiVdweGsFKqgIWFOtZOWNwLVZtpQYy73ExV7q0fbtxL/59dn1Hm1H3dKBU56t2pc0P7eQ61p94dFWmOvkgcHfcc83x9NnpM8tBdVCTKcAG5PKsOnu4s0iisYjlpPWdwdigOmAXd93Y9PEF+gy5RGfx+b+74bgF9ixFqVMV+KtEOnadxlrf+0KGIzssYcTnHuZsDCdYPOwZq29NyP5v8hT8Msc//0DZ4d+Lk21US9m4rWFR5vM8DDgZXm5V+nCZMHalVBYiKlC//MMeus8cgp6Ut6AAxQ5nyAvv3TP1d/v/etlwAH+ePEfXupV8RSpZZmQ4T/vxpOjfoqo3z7uiC4B+5tdf2loJ8orxIgrotMdc0jvtwPD4vJJ5+1KJfdgEg7ZRtYKP4UH9oWYZ7sCCZoce7dhWJx0H7KK1r3WYVjtxNjspFoLCRbql5oWeg4RscTAwB+Acnes1oZw3DLEqiNSaiPaiFcT67/bgQqSBG/tt65069mzXDldUtJCK5Dc5fahJHSdF1DGoabhdLrcJp9PWORXbv/qfPKzK+deUUrhKDfGuMRCLLbSqIyf3t1YqXOHQpNLz/Xbl372WGIyGgY9h1no2k7e5pIFJcbbdMLie8ey7rURZK1sTe7mZqy9bSp/nnw/pqN0bBX6gYoN/S6rcPnPJc+T0oroOngt3Y5dw1NnrQ543LDRbSscuy/xzZHjV8Bxf8Og7+G4pcgxPyOG3hRXW9FGvJpY8H9rgspsmusOI3O4ZusxcXYMawG+Z1uutsEfXED7C/tT5Hw76PlzC91xwEEi3Z5M/yLouXzhtJdGf5x6y49M3fYIr697mimbHuetzEe45KkveP2ywGGAVSGmaWNaPnInklqmqEFsDK2evIdGp4UWH67cRjkmzV6ST+Sv+8eCskGZlFMAOBWLT3245NiKGMyKuFKkkW8XVP82WZzSfSe+Ygq79mrI5BmVD6MVIxaJa4EYrnUW+8b5FP1vJEWThlL05mjsW/1PBDTVi/aJVxOOguCztKa9UwFIHH02WW+6kkf1GryWpb/0BLP4T1VcwFcxeMZlpLZr5G4PpRpL6MkilVIVnsUZ7vzmY27+kfF3/OKRVEkpGHrhcvqctJ4ls4bQb0zwDH6VIb5DWzq+9nSl9AewJMaDrfRvdWBNBq5M3X7O5TDJXpdJche3oW3RDbavAZxY03Iwyqw1mwUGjuykkFLaliW220D8pZv6z9h13DtqPQ/P6sK63YmccmYnbn7xDGy28H21iz65FvaXmYTYc1Ff30lRiwHEnPp/YbuOpnLomXg1MfjmTkFllNNlKOJ79itpE4G+x62kQ6/1xCbkEROXT4v22zjywtwyBhwsEt7cHdsX+a3I55dim1negBf3iUBa4wIaN7soDBoG06XyKQDaPVy6c/HfaYOCyu+dXTorTbz4GUAR09hlwIvHLQJGnElMoyysJ19TIX0sMYGNfqxN8eTpa5lxzRJuf+Xs8Brwj6/2NOBl2b4Ix4YfwnYtTeXQRryaOOKM1kFlOp3sqlgiIpDsuTkjJT2P7gPW02PQWhq32k/Da+/y6DeM4FVnihn2aPCqPPmHKp5qVERo088RsDCCCDRsthOnvQYL7QYhrmPP0om3PcAs3E1869KcJCJCbJ+u7ueecuL2xFhWe5Z5C4XY024MKmPrf3JY89c48g7CgXUBZcz5eiZe02gjXk2ICH0v9+9CsMYZJDcunXE1vs9/Lm5rrwFYExI92myW0CutDJ3YM6hM66MbBZXxxcPfBk8FKgKOnNcrdf7qQCxJSAW+Gk3GD/Zs2Pmn3x8yESB3N2ZBxeplxh95AvGXPorPHxTDQtzpN5N46tUVOmcwzLn/CS7kDO8eA03F0T7xamT8G0ex9N1tKB+b4u7YPMbjtREXR+Pn32Pf609hbnDnTLFYSL74BhJ7e1ezs1pb4ddx6kY40/W/CI84zuFBq+9KNukdEohNrlw0QnxqOvmh3BRILS+f1eld2HAhqb22cnh5WwLNxg2j4nMh58pPMfpfXqFjYtv1JPY/M1BOB6owH4lPimzmyCJtoKOBkD59IjJVRPaIiM+VMRHpKiK/i0ihiNxRru9WEVklIitFZJqI69srIu1EZKGIbBSR6SJS5yszGIbBowVn029CO9c7L9BqcAMeOHQ6yRneIWeGYdD4+ntp+uIHrsdz7/o04MXE2b4PcPUYkuIf92h5xHEOqe08jWnbYY24dZ1nBZuKIJYGIdWZtCUFKe1WwxipA6D1M7Q9dSWByq11e6Vi/u0SVnjXvAwVsVgxEpIjn/r3hPtC0abkmbnnL8yvz8SccTTmzBGY6yo/Rk3oSCixrSIyBMgB3lVKed2Li0hjoA2uepkHlVLPuttbAL8A3ZVS+SLyMfC1Uupt9/MZSqmPRGQSsEwpFfAeu3///mrx4sUVG2E9w25fS779dDzjCIeQHP8iIv4jWExTYRjhMQr5O48FAm2zjyO+2bKwXCvSKKXIWfYVa+5c6NXX9MqRtD57iFe7/c3jQjq37YqfgwvVMEWThgYW6Hsh1n4XwpfH4zd2tddEjE5nhlu1eoWILFFK+dxOHZI7RSm1QETaBujfA+wRkdF+rhEvInYgAdjhLpB8AnC+W+Yd4GGg9jpKowSbrSs2W/CY9PKEy4ADxDSeSdGeo/32x2Z8GbZrRRoRIbnPWI78/ES2v/cj2Ss2Ed+uCa0mjHLlNKkslgqkVKhJLvgUPvBjgMWKrf/FqNmnEnDzwfKnMNM7YzTqFREV6zsRXdhUSm0HnsW1F3wncFgp9R3QEDikVIl3OBNo4escInKViCwWkcV790ZPEqX6jMXSgNiMX4By+dyNlsRmzMGwtq0JtaqENSmeNteOpudrN9DhzrMCG/DelwY/4cBrw6ZbJIlJboRx2TeQ0Nizo80x2C7/CqVMsAeuKATAT7XbfRbNRHRhU0TSgdOAdsAh4BMRuRAIkGXHE6XUZGAyuNwpEVCzTlB04ADbHnoaDrsK5kpKMs1uuZ74jm1rRB/DmkF8s69r5Nrh5PDeAtb+sZdFszPJaJXAabd0Jy4x8KKvrf8V2Nd/Dfl7fAuIFVv30KOJahprbDxc/LHPPpW322e7N0FS3GoqTaSjU0YAm5RSewFEZAYwGPgASBMRq3s23hKoXLZ8DQe/m8uB9z/xaFNZ2ex45CmsrVrQ5vEHakiz6MXhcHLvsG9Z89s+j/b3H1zGqTd15aoX/C8wA1jP+xTHqk9h4X8BOJxlY+aPPUlraGH0609FTO9qJ85P3U5NtRFpI74VOEpEEoB8YDiwWCmlRGQecCbwEXAJED2O0lqEMyfXy4CXxbFtOzvfeItmV19WjVpFL0opXr/+D755Y4Nfma/+u5bR13emRcc0vzIigq3nWageZ3J66rsU5pXeRP7v/Wlc/FgfzpvYJ4ya1wyGYWCSCOTWtCr1llBDDKcBvwNdRCRTRK4QkWtE5Bp3f1MRyQRuA+53y6QopRYCnwJ/ASvc15vsPu3dwG0ishGXj/zNsI6snrD3Q/+pX4vJ+3Uhh3/zjq7QeHP30G8CGvBiHh79Y0jnG5fyjocBL+bd+5fy3dve6YCjktMDZ9AEoOWoyOtRTwk1OiVgGWyl1C5cLhFffQ8BD/lo/xcIfE+qCUrB6sDboovZN+ktErp2wdYgLbIKRTGbVx1gzS/7ggsC+7bmBZXJzy2iKEDa8Bcm/MbwizpisUT3xmnDMDAHPAmL7vEjYUEGPlydKtUrovvTo0ESQt/5uPWO+yOoSfTz2GkhzCjdtO6ZGlRm2hNLg8os+iYz5GvWZozWJ8Lw6UC5z2Ojo5HTf0WkdpRGrIvobfdRTsOzx7H7+ddCE3Y4yF+/kfjOHSOrVJSye1Poft0X/xwTVOaT/wtctAFg29rDHBX8VFGBkdYBzvilptWod+iZeJST1KdiGyjy/l4eIU3qD216h5izxAwuMvySDsGFNJoAaCNeB0g9PfSpnMTGRlCT+sErf40P27kaZOi6lZqqoY14HaDhuNEkDPG/zb0sSYMHRFib6CWtaeAfuE4DU/nKeXHI5wvmBr7hdf230FQdbcTrACJCswmX0GbS84EFY2OIadw4sEw95ql5J/vtO+eh7jz/+2kVOt9js0cE7B99ZY8KnU+j8YU24nUIa0ICLZ70iuZ0IUKbF56sXoWijBadU5m6ZTwZbUqTU1li4K3M8Vz4oM8EcgE5ckRLLn/6SK/2xHQbMw6d7+OIuoc6+C+Onx7H8e5QHG8PwTHzcpwF2TWtVp0ipFS0tQWdijZ0Ds37hcM/zMewWkgfO4qkfn1qWqV6jcPhxGIxIp8DvBbhWPQarPKTU3z0FKwZ3apXoSimyqloNdFH2rBjSRsWvFSapnqwWutXnLRz72r/Bhxg9pVwqQ5HDAfanaLRaMKOmh2ssHP0eABqO9qIazSasKIKs4BQCq1qwoE24hqNJrwU6YyG1Yk24hqNJrwkNalpDeoV2ohrNJqwImLAMUGSrcU1rB5l6gHaiGs0mrBj7TQKUv3n9ZGTX6lGbeo22ohrNJqIYD39dRhZLsOmWGHs21jSWteMUnWQoHHiIjIVGAPsUUr19NHfFXgLOBK4Tyn1rLu9CzC9jGh74EGl1Isi8jBwJVBcvv5epVT0V9XVaDQeWJv1hkt/rWk16jShbPZ5G3gFeNdP/wHgJmBc2Ual1DqgD4C4MsJvBz4vI/JCscGPNpwOJzvXZZPeIp7ENJ0VUKPR1BxBjbhSaoGItA3QvwfYIyKjA5xmOPCPUmpLxVWsXdzZ7St2rcvxaHt63Siad0qrGYU0dRp7voO8PfkkNU3AElu/dn1qQqO6tt2fC0wr13aDiFwMLAZuV0od9HWgiFwFXAXQunXN+tHu8mHAAe7u8g3nPHMEY+7w8jZpNJXCYXfwv2YfejZa4JI1Z5PQIPSSfJq6T8QXNkUkBhgLfFKm+XWgAy53y07gOX/HK6UmK6X6K6X6Z2RkRFLVoOz0YcCLmX7XCjYuDK3IrkYTiOzMHG8DDuCEd7p8TDQlrdNEnuqIThkF/KWU2l3coJTarZRyKqVM4H9EQdX71Qt2BJV572adYVFTNZRSvN9nRgAB2PjF5mrTR1P7qQ4jfh7lXCki0qzMy9OBldWgR5WY/79NQWU2/3Uo8opUM6bDJG9/IaYjhIKRmiqz6q11QWW2fL+9GjTRRAuhhBhOA4YCjUQkE3gIsAEopSaJSFNcfu0UwBSRW4DuSqksEUkETgSuLnfaZ0SkD65UZpt99Nc6GrVJDCqTkGarBk2qh/mPruCnRzyrtRs2uHTecFoNalRDWtV9fn7gz6Ay6Z1SqkETTbQQSnTKeUH6dwEt/fTlAl77a5VSF4WqYG3hyFNb8tUTawLK3D5rSDVpE1k+HP8zG77ydh+Zdph67FyuX30yjTql1oBm9YDC4CIdTm8bcTU00YPesRkiHQY2JDFAecqUpjF0HFizC6/hID+rwKcBL8tbx8+rJm3qISEU/klrq2fimlK0EQ8REeH/Vo6n+wjvxD3jH+3BqzvOqAGtws+sa4MvzubtDWG6qKkU/e46ImB/Stvgbj1N/UKXZ6sAyY1iuee7kyjIdeAodJLUoO7t1ty5+FBNq1CvGXBHH/5+bSVmtu8wwlM/O6maNdLUdvRMvBLEJVrrpAEHSGmdEFQmqXndHHttQES4etNF9Liys0d7+3GtuWTVWaS0Sa4hzTS1FV3tXuPB9j/3MeWYuQFl7t4/jrgUbcg1muoiULV7PRPXeNBiYCN6Xew/vcFVS0ZoA67R1CK0Edd4cfqbR3Pj2lNoMTgdLBDfJIbLfjmBh+zn0KyXrsii0dQm9MKmxicNOiQz4Se9iKbR1Hb0TFyj0WiiGG3ENRqNJorRRlyj0WiiGG3ENRqNJorRC5vVQH5OEd8+sgpnocmIu7qR2iL4hhqNRqMJBW3EI8wjnWZyYGN+yeuf/7uRpj2SuXvFKERCyHak0Wg0AdDulAjyxpgfPQx4MbtWZTP9ukU1oJFGo6lraCMeQdbM3uu3749Jm/jg0j+qURuNRlMXCWrERWSqiOwREZ8l1ESkq4j8LiKFInJHmfYuIrK0zCPLXfUHEWkgIt+LyAb3/+lhG1EtwV7gCCqz6J0tLJm+pRq00Wg0dZVQZuJvAycH6D8A3AQ8W7ZRKbVOKdVHKdUH6AfkAZ+7uycCc5VSnYC57td1isy/D4Yk99HlwctxaTQajT+CGnGl1AJchtpf/x6l1CLAHuA0w4F/lFLF087TgHfcz98BxoWkbRShQqwrbM/TBYg1Gk3lqS6f+Ll4VrxvopTa6X6+C2hSTXpUG20GhpYoyhqrlyU0Gk3libgFEZEYYCzwia9+5Upo7jepuYhcJSKLRWTx3r3+FwprGxZbaG/tmKd7RVgTjUZTl6mOaeAo4C+l1O4ybbtFpBmA+/89/g5WSk1WSvVXSvXPyIiuQsTD7+0cVGbozV2qQRONRlNXqQ4jfh6erhSAmcAl7ueXAF9Wgx7VzikP9w74Dj+2/7TqU0aj0dRJgpZnE5FpwFCgEbAbeAiwASilJolIU2AxkAKYQA7QXSmVJSKJwFagvVLqcJlzNgQ+BloDW4CzlVJ+F0+LicbybLkHCnlz/M/8+9P+kraWA1K5feFIvWNTo9GERKDybLrGpkaj0dRydI1NjUajqaNoI67RaDRRjDbiGo1GE8XoVLTVhJm3G+ZdCQW7IaUjDH8Hw9Bvv0ajqRp6Jl4NmL9MhG9GQ8EOwAlZ6+DzozC3/ljTqmk0mihHG/EIY2bOg90/+O5cdBfRFB2k0WhqH9qIR5qFdwbsVgtuqiZFNBpNXUQb8QgS0ix73++RV0Sj0dRZtBGPKDrNrEajiSzaiEcQEQtYgyTtsiRWjzIajaZOoo14hJFhrwYWOOmz6lFEo9HUSbQRjzCS0h5OnuW7s/8TGAmNqlchjUZTp9C7TaoBI7EpnLEY88Aq2Pc3JLZCmh/rcrdoNBpNFdBGvBoxGvSABj1qWg2NRlOH0O4UjUajiWK0EddoNJooRhtxjUajiWK0EddoNJooRhtxjUajiWKiqsamiOzFVVi5JmkE7KthHcJBXRkH1J2x1JVxQN0ZS20ZRxullM/t31FlxGsDIrLYX8HSaKKujAPqzljqyjig7owlGsah3SkajUYTxWgjrtFoNFGMNuIVZ3JNKxAm6so4oO6Mpa6MA+rOWGr9OLRPXKPRaKIYPRPXaDSaKEYbcY1Go4litBEvg4hYRORvEfFKAC4i14jIChFZKiK/iEh3d7tNRN5x960RkXuqX3NvKjmWGBF5y923TESGVrfe5Qk0jjIyZ4iIEpH+ZdruEZGNIrJOREZWj7aBqcxYRKShiMwTkRwReaX6tPVPJcdxoogscX+2lojICdWnsX8qOZaB7u/OUvf35PTq09gbnYrWk5uBNUCKj74PlVKTAERkLPA8cDJwFhCrlDpCRBKA1SIyTSm1uZp09kdlxnIlgHssjYFvRGSAUqomi4UGGgcikuyWWVimrTtwLtADaA78ICKdlVLOyKsbkAqPBSgAHgB6uh+1gcqMYx9wqlJqh4j0BL4FWkRa0RCozFhWAv2VUg4RaQYsE5GvlFKOiGvrAz0TdyMiLYHRwBRf/UqprDIvE4HiFWEFJIqIFYgHioAsapAqjKU78KNbZg9wCKixjQ7BxuHmUeBpXMaumNOAj5RShUqpTcBGYGDEFA2Byo5FKZWrlPoFz/HVGFUYx99KqR3ul6uAeBGJjZiiIVCFseSVMdhxlH5/agRtxEt5EbiLACXqReR6EfkHeAa4yd38KZAL7AS2As8qpQ5EVtWgvEjlxrIMGCsiVhFpB/QDWkVY10C8SIBxiMiRQCul1OxyXS2AbWVeZ1Lzs74XqdxYahsvUvVxnAH8pZQqDL96FeJFKjkWERkkIquAFcA1NTULB23EARCRMcAepdSSQHJKqVeVUh2Au4H73c0DASeu2/Z2wO0i0j6S+gaiimOZisvgLcb1Af8N19iqnWDjEBEDlxvo9mpVrBLUlbGEYxwi0gPXzPbqiCgZIlUdi1JqoVKqBzAAuEdE4iKmbDCUUvX+ATyJy3htBnYBecD7AeQN4LD7+avARWX6pgJnR+NYfPT9BnSvjeMAUnH5WTe7HwXADlzun3uAe8rIfgscXVv/JoHGUkbmUuCVmhpDOMYBtATWA8fU5DjC9TcpI/ujr/ZqG0tNv5m17QEMBWb5aO9U5vmpwGL387uBt9zPE4HVQK+aHkclx5IAJLqfnwgsqOkxBBpHOZn5ZYxFD1yuoVhcd0f/ApaaHkdlxlKmrcaNeBX/Jmnuv8n4mtY9DGNpB1jdz9u4jXujmtJfR6cEQEQewWXgZgI3iMgIwA4cBC5xi70KvOX2jwkug768RhQOQIhjaQx8KyImsB24qEaUDUC5cfhEKbVKRD7G9YPqAK5XNR+Z4kUoY3HLbcYVPREjIuOAk5RSqyOvYWiEOI4bgI7AgyLyoLvtJOVaQK81hDiWY4GJImLH5U+/TilVY+lq9bZ7jUajiWL0wqZGo9FEMdqIazQaTRSjjbhGo9FEMdqIazQaTRSjjbhGo9FECBGZKiJ7RGRliPJni8hqEVklIh+GdIyOTtFoNJrIICJDgBzgXaVUwARmItIJ+Bg4QSl1UEQahxKCqWfiGo1GEyGUUgsAj1xKItJBROa4U/L+LCJd3V1XAq8qpQ66jw0phl4bcY1Go6leJgM3KqX6AXcAr7nbOwOdReRXEflDRE4O5WR6x6ZGo9FUEyKSBAwGPhGR4ubilLxWoBOuNAAtgQUicoRS6lCgc2ojrtFoNNWHARxSSvXx0ZcJLFRK2YFNIrIel1FfFOyEGo1Go6kGlKsgyyYROQtAXPR2d3+BaxaOiDTC5V75N9g5tRHXaDSaCCEi04DfgS4ikikiVwAXAFeIyDJcVY5Oc4t/C+wXkdXAPOBOpdT+oNfQIYYajUYTveiZuEaj0UQx2ohrNBpNFKONuEaj0UQx2ohrNBpNFKONuEaj0UQx2ohrNBpNFKONuEaj0UQx/w88HJb+CkAPnwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dbscan.plot(condition=lambda x: len(x) >= 50, cmap='plasma')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Properties of a single cluster\n",
    "\n",
    "Single clusters can be plotted too"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sampleCluster = dbscan.getCluster(0)\n",
    "\n",
    "sampleCluster.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clusters have an identifier and coordinates. It is easy to extract additional information,\n",
    "e.g. via the summary method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'centroid': array([4376695.82252174, 1183767.04571391]),\n",
      " 'identifier': 0,\n",
      " 'numMembers': 115,\n",
      " 'radius': 349.2315943771115}\n"
     ]
    }
   ],
   "source": [
    "pprint(sampleCluster.summaryDict())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "A single cluster is just a wrapper around its coordinates. They can be\n",
    "retrieved either as a numpy array, a geodataframe or a MultiPoint object.\n",
    "The latter is useful for geometric operations, e.g. computing hulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"300\" viewBox=\"4376381.322632001 1183437.8626320004 665.7975359987468 602.2975359978154\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,2367478.0227999985)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"4.438650239991645\" opacity=\"0.6\" d=\"M 4376623.998500001,1183462.5218000002 L 4376489.061000001,1183610.1592999995 L 4376405.981800001,1183903.8467999995 L 4376922.4485,1184015.5009999983 L 4377022.460999999,1183890.6176000014 L 4376806.561000001,1183528.1385000013 L 4376788.5693,1183508.0300999992 L 4376623.998500001,1183462.5218000002 z\" /></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.polygon.Polygon at 0x7fdea4339ad0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusterMultipoint = sampleCluster.asMultipoint()\n",
    "clusterMultipoint.convex_hull"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"300\" viewBox=\"4376381.322632001 1183437.8626320004 665.7975359987468 602.2975359978154\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,2367478.0227999985)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"4.438650239991645\" opacity=\"0.6\" d=\"M 4376788.5693,1183508.0300999992 L 4376693.3193,1183492.6843000017 L 4376623.998500001,1183462.5218000002 L 4376489.061000001,1183610.1592999995 L 4376504.406800002,1183709.113499999 L 4376456.781800002,1183843.5218000002 L 4376447.785999998,1183850.4010000005 L 4376421.3277,1183871.0384999998 L 4376405.981800001,1183903.8467999995 L 4376436.144299999,1183885.3260000013 L 4376512.344300002,1183882.1510000005 L 4376550.4443,1183813.3592999987 L 4376588.0152,1183786.9010000005 L 4376652.5735,1183755.6801000014 L 4376773.752700001,1183838.2300999984 L 4376775.3401999995,1183868.3926 L 4376798.094300002,1183949.3550999984 L 4376909.748500001,1183991.6884999983 L 4376922.4485,1184015.5009999983 L 4377022.460999999,1183890.6176000014 L 4376901.281800002,1183853.0467999987 L 4376855.773499999,1183819.1801000014 L 4376832.490200002,1183778.4343000017 L 4376810.2652,1183753.0342999995 L 4376790.686000001,1183664.6634999998 L 4376793.861000001,1183614.9217999987 L 4376806.561000001,1183528.1385000013 L 4376788.5693,1183508.0300999992 z\" /></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.polygon.Polygon at 0x7fdea4396190>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we also provide a utility for computing alpha shapes for such objects\n",
    "\n",
    "alphaShape(clusterMultipoint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "sensAI also provides utilities for computing trees, e.g. here for the minimal spanning tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sampleTree = CoordinateSpanningTree(sampleCluster)\n",
    "sampleTree.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Most objects provide a way for extracting a summary from them, either as a dict or as a data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cluster summary:\n",
      "{'centroid': array([4376695.82252174, 1183767.04571391]),\n",
      " 'identifier': 0,\n",
      " 'numMembers': 115,\n",
      " 'radius': 349.2315943771115}\n"
     ]
    }
   ],
   "source": [
    "print(\"cluster summary:\")\n",
    "pprint(sampleCluster.summaryDict())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 0% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 5% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 10% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 15% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 20% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 25% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 30% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 35% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 40% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 45% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 50% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 55% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 60% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 65% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 70% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 75% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 80% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 85% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 90% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 95% of clusters\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>centroid</th>\n",
       "      <th>numMembers</th>\n",
       "      <th>radius</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>identifier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[4376695.82252174, 1183767.045713913]</td>\n",
       "      <td>115</td>\n",
       "      <td>349.231594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[4376876.279427272, 1195560.675918182]</td>\n",
       "      <td>44</td>\n",
       "      <td>223.324669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[4377779.652260293, 1198338.2656926473]</td>\n",
       "      <td>68</td>\n",
       "      <td>246.582618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[4378073.775288462, 1205306.8416676929]</td>\n",
       "      <td>130</td>\n",
       "      <td>466.581354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[4378265.649890477, 1186429.8616714287]</td>\n",
       "      <td>21</td>\n",
       "      <td>158.661667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           centroid  numMembers      radius\n",
       "identifier                                                                 \n",
       "0             [4376695.82252174, 1183767.045713913]         115  349.231594\n",
       "1            [4376876.279427272, 1195560.675918182]          44  223.324669\n",
       "2           [4377779.652260293, 1198338.2656926473]          68  246.582618\n",
       "3           [4378073.775288462, 1205306.8416676929]         130  466.581354\n",
       "4           [4378265.649890477, 1186429.8616714287]          21  158.661667"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dbscan.summaryDF().head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving and Loading"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the objects used above can be exported to a GeoDataFrame using the `toGeoDF` method. This geodataframe\n",
    "can then be persisted as usual.\n",
    "\n",
    "In addition to that `CoordinateClusteringAlgorithm` has its own save method which persists the object as pickle.\n",
    "An instance can be loaded using the load classmethod.\n",
    "This way of persisting the fitted algorithm is _much more efficient and general_ than saving the corresponding gdf\n",
    "\n",
    "Individual clusters themselves also have saving and loading methods,\n",
    "with the difference that they are persisted as (and instantiated from) shapefiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 0% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 5% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 10% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 15% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 20% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 25% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 30% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 35% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 40% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 45% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 50% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 55% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 60% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 65% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 70% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 75% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 80% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 85% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 90% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.base.clustering:Processed 95% of clusters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.util.tracking:Finished execution of toGeoDF in 10.26s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>identifier</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MULTIPOINT (4376405.982 1183903.847, 4376421.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MULTIPOINT (4376700.416 1195503.201, 4376709.4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MULTIPOINT (4377538.080 1198386.015, 4377561.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MULTIPOINT (4377825.214 1205091.938, 4377840.9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MULTIPOINT (4378139.532 1186424.797, 4378165.9...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     geometry\n",
       "identifier                                                   \n",
       "0           MULTIPOINT (4376405.982 1183903.847, 4376421.3...\n",
       "1           MULTIPOINT (4376700.416 1195503.201, 4376709.4...\n",
       "2           MULTIPOINT (4377538.080 1198386.015, 4377561.8...\n",
       "3           MULTIPOINT (4377825.214 1205091.938, 4377840.9...\n",
       "4           MULTIPOINT (4378139.532 1186424.797, 4378165.9..."
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dbscanGeoDF = dbscan.toGeoDF() # here again a condition for filtering clusters can be passed\n",
    "clusterGeoDF = sampleCluster.toGeoDF()\n",
    "treeGeoDF = sampleTree.toGeoDF()\n",
    "dbscanGeoDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.coordinate_clustering:Saving instance of Cluster as shapefile to /home/runner/work/sensAI/sensAI/temp/sampleCluster_0\n"
     ]
    }
   ],
   "source": [
    "dbscanSavedPath = os.path.join(c.temp, f\"{dbscan}_sample.pickle\")\n",
    "clusterSavedPath = os.path.join(c.temp, f\"sampleCluster_{sampleCluster.identifier}\")\n",
    "\n",
    "\n",
    "dbscan.save(dbscanSavedPath)\n",
    "sampleCluster.save(clusterSavedPath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.util.cache:Loading instance of <class 'sensai.clustering.coordinate_clustering.SKLearnCoordinateClustering'> from /home/runner/work/sensAI/sensAI/temp/SKLearnCoordinateClustering_sample.pickle\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.clustering.coordinate_clustering:Loading instance of Cluster from /home/runner/work/sensAI/sensAI/temp/sampleCluster_0\n"
     ]
    }
   ],
   "source": [
    "loadedDBSCAN = SKLearnCoordinateClustering.load(dbscanSavedPath)\n",
    "loadedCluster = SKLearnCoordinateClustering.Cluster.load(clusterSavedPath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# The loaded objects are equal to the ones we persisted\n",
    "\n",
    "print(loadedCluster.identifier == sampleCluster.identifier)\n",
    "print(np.array_equal(sampleCluster.datapoints, loadedDBSCAN.getCluster(0).datapoints))\n",
    "\n",
    "# Cleaning up\n",
    "import shutil\n",
    "\n",
    "shutil.rmtree(clusterSavedPath)\n",
    "os.remove(dbscanSavedPath)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
